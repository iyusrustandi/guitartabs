project-root/
│
├── index.html           # File utama menampilkan da tabel
├── tabs-layout.html     # File untuk menampilkan file tab
├── tabs-layout.css      # File CSS untuk styling tabs-layout.html
├── style.css            # File CSS untuk styling index.html
├── script.js            # File javascript untuk index.html
├── tabs-script.js       # File javascript untuk tabs-layout.html
├── data.json            # File data tabel yang akan ditangkap index.html
├── Tab/
│   └── artist-song.html   # File tab lagu
├── images/
│   └── icon.png         # Ikon untuk halaman (jika ada gambar lain, simpan di folder ini)
└── README.md            # Dokumentasi proyek (opsional, untuk menjelaskan proyek)

project/
├── index.html
├── components/
│   └── transpose-button.html
├── transpose-button.html
├── styles/
│   └── tabs-layout.css
├── scripts/
│   └── tabs-script.js
└── assets/
    └── images/

dropbox account backupsatu001
How to embed mp3 from dropbox

1. copy link
2. change the 'dl=0' at the end of the link to 'raw=1'
3. "file": "https://www.dropbox.com/scl/fi/6i13ssfderc2gt2rg1r26/Wijaya-80-Terakhir-Kali.mp3?rlkey=moip5vjo1ipiva8xkak0pgr6z&st=3d1kcj6r&raw=1"

 <td>
               ${
                 item.file
                   ? `
                <div class="audio-player">
                  <audio controls>
                      <source src="${item.file}" type="audio/mpeg">
                      Your browser does not support the audio element.
                  </audio>
                </div>
                `
                   : '<span class="no-audio">No Audio</span>'
               }
            </td>


waveform audio :

 document.addEventListener('DOMContentLoaded', function () {
        const multitrackButton = document.getElementById('multitrack-button');
        const multitrackContainer = document.getElementById('multitrack-container');
        const songDataUrl = '/api/data.json';
        const params = new URLSearchParams(window.location.search);
        const artist = params.get('artist');
        const song = params.get('song');

        let audioTracks = {};
        let waveSurfers = {};
        let isDragging = false;

        function loadMultitrackData(artist, song) {
          fetch(songDataUrl)
            .then((response) => response.json())
            .then((data) => {
              const songData = data.find((item) => item.artist.toLowerCase().trim() === artist.toLowerCase().trim() && item.song.toLowerCase().trim() === song.toLowerCase().trim());

              if (songData && songData.tracks) {
                generateMultitrackPlayer(songData.tracks);
              } else {
                multitrackContainer.innerHTML = "<p style='color:red;'>Multitrack data not available.</p>";
              }
            })
            .catch((error) => console.error('Error loading multitrack data:', error));
        }

        function generateMultitrackPlayer(tracks) {
          audioTracks = {};
          waveSurfers = {};

          multitrackContainer.innerHTML = `
      <div class="master-controls">
        <button id="play-all">▶️ Play</button>
        <button id="pause-all">⏸️ Pause</button>
        <button id="stop-all">⏹️ Stop</button>
        <label>Master Volume: <input type="range" id="master-volume" min="0" max="1" step="0.01" value="1"></label>
      </div>
      <div class="progress-container">
        <input type="range" id="master-progress" min="0" max="100" value="0" step="0.1">
      </div>
      <div class="track-list">
        ${Object.entries(tracks)
          .map(
            ([instrument, file]) => `
            <div class="track">
              <label>${instrument.toUpperCase()}</label>
              <label>Volume: <input type="range" class="track-volume" data-track="${instrument}" min="0" max="1" step="0.01" value="1"></label>
              <div id="waveform-${instrument}" class="waveform"></div>
            </div>
          `
          )
          .join('')}
      </div>
    `;

          // Load waveform untuk setiap track
          Object.entries(tracks).forEach(([instrument, file]) => {
            const wavesurfer = WaveSurfer.create({
              container: `#waveform-${instrument}`,
              waveColor: 'gray',
              progressColor: 'blue',
              cursorColor: 'red',
              barWidth: 2,
              height: 50,
            });

            wavesurfer.load(file);
            waveSurfers[instrument] = wavesurfer;

            // Simpan audio dalam objek
            audioTracks[instrument] = new Audio(file);
          });

          const masterProgress = document.getElementById('master-progress');

          function syncProgress() {
            const anyTrack = Object.values(audioTracks)[0];
            if (anyTrack && !isDragging) {
              const progress = (anyTrack.currentTime / anyTrack.duration) * 100 || 0;
              masterProgress.value = progress;

              // Sinkronkan semua waveform
              Object.values(waveSurfers).forEach((wavesurfer) => {
                wavesurfer.seekTo(progress / 100);
              });
            }
          }

          function setAllTracksTime(time) {
            Object.values(audioTracks).forEach((audio) => {
              audio.currentTime = time;
            });
            Object.values(waveSurfers).forEach((wavesurfer) => {
              wavesurfer.seekTo(time / audioTracks[Object.keys(audioTracks)[0]].duration);
            });
          }

          // Event Listener untuk kontrol
          document.getElementById('play-all').addEventListener('click', () => {
            Object.values(audioTracks).forEach((audio) => {
              audio.play();
            });

            Object.values(waveSurfers).forEach((wavesurfer) => {
              if (wavesurfer.isPlaying()) {
                wavesurfer.play();
              } else {
                wavesurfer.play();
              }
            });
          });

          document.getElementById('play-all').addEventListener('click', () => {
            Object.values(audioTracks).forEach((audio) => {
              if (audio.paused) {
                audio.play();
              }
            });

            Object.values(waveSurfers).forEach((wavesurfer) => {
              if (!wavesurfer.isPlaying()) {
                wavesurfer.play();
              }
            });
          });

          document.getElementById('pause-all').addEventListener('click', () => {
            Object.values(audioTracks).forEach((audio) => {
              audio.pause();
            });

            Object.values(waveSurfers).forEach((wavesurfer) => {
              if (wavesurfer.isPlaying()) {
                wavesurfer.pause();
              }
            });
          });

          document.getElementById('stop-all').addEventListener('click', () => {
            Object.values(audioTracks).forEach((audio) => {
              audio.pause();
              audio.currentTime = 0; // Reset ke awal
            });

            Object.values(waveSurfers).forEach((wavesurfer) => {
              wavesurfer.stop(); // Reset waveform
              wavesurfer.seekTo(0); // Pastikan ke awal
            });

            masterProgress.value = 0; // Reset progress bar master
          });

          // Master volume control
          document.getElementById('master-volume').addEventListener('input', (e) => {
            const volume = e.target.value;
            Object.values(audioTracks).forEach((audio) => {
              audio.volume = volume;
            });
          });

          // Individual track volume control
          document.querySelectorAll('.track-volume').forEach((slider) => {
            slider.addEventListener('input', (e) => {
              const track = e.target.dataset.track;
              if (audioTracks[track]) {
                audioTracks[track].volume = e.target.value;
              }
            });
          });

          // Update progress bar saat lagu berjalan
          Object.values(audioTracks).forEach((audio) => {
            audio.addEventListener('timeupdate', syncProgress);
          });

          // Memindahkan indikator master track
          masterProgress.addEventListener('input', (e) => {
            isDragging = true;
            const anyTrack = Object.values(audioTracks)[0];
            if (anyTrack) {
              const newTime = (e.target.value / 100) * anyTrack.duration;
              setAllTracksTime(newTime);

              Object.values(waveSurfers).forEach((wavesurfer) => {
                wavesurfer.seekTo(newTime / anyTrack.duration);
              });
            }
          });

          masterProgress.addEventListener('change', () => {
            isDragging = false;
          });
        }

        multitrackButton.addEventListener('click', () => {
          if (multitrackContainer.style.display === 'none') {
            loadMultitrackData(artist, song);
            multitrackContainer.style.display = 'block';
          } else {
            multitrackContainer.style.display = 'none';
          }
        });
      });